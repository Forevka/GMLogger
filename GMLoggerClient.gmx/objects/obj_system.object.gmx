<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Global Variables
global.connected_to_server = false;


socket  = network_create_socket(network_socket_tcp);
network_connect_raw(socket, "127.0.0.1", 10103);

ping = 0;
ping_step = 0;
ping_timeout = 1 * room_speed * 1

//Set config.
network_set_timeout(socket, 2000, 2000);

client_raw_send_ping();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client_raw_send_ping()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Processes Networking Data

//Get the id of the socket.
var socket_id = ds_map_find_value(async_load, "id");

//Check if socket is our socket.
if (socket_id = socket)
{
    //Check the type of network event.
    var type = ds_map_find_value(async_load, "type");
    switch (type)
    {
        //Connect Event.
        case network_type_non_blocking_connect:
        {
            var success = ds_map_find_value(async_load, "succeeded");
            if (success = 0)
            {            
                //Failure connection. Retry.
                global.connected_to_server = false;
            }
            else
            {
                //Succesful connection.
                global.connected_to_server = true;
                client_raw_send_connection();
                client_raw_send_ping();
                //alarm[0] = 1 * room_speed
            }
            break;
        }
   
        //Incomming Data Event.
        case network_type_data:
        {
            //Get the packet from the server.
            var read_buffer = ds_map_find_value(async_load, "buffer");
            var constant = buffer_read(read_buffer, buffer_u16);
            switch (constant)
            {
                // 1050 = Recive Ping
                case 1050:
                {            
                    //Update variables.
                    ping = ping_step;
                    alarm[0] = 1 * room_speed * 0.5//room_seconds(1); //Send again in 1 second.
                    show_debug_message("received ping")
                    break;
                }
           
                // 1007 = Recive Server Ping
                case 1007:
                {            
                    //Create buffer.
                    var buffer = buffer_create(128, buffer_grow, 1);
                    buffer_seek(buffer, buffer_seek_start, 0);
                    buffer_write(buffer , buffer_u16, 2005);
               
                    //Return ping to client.
                    network_send_raw(socket, buffer, buffer_tell(buffer));
                    buffer_delete(buffer);
                    break;
                }

                // 1008 = Recive Players Online
                case 1008:
                {            
                    //Recive player online data.
                    var players_online = buffer_read(read_buffer, buffer_s32);
               
                    //Update global.
                    global.players_online = players_online;
                    break;
                }
           
                // 1009 = Disconnected From Server
                case 1009:
                {
                    //Returns to main menu.
                    //event_user_ext(ctr_multiplayer, 0);
                    //room_goto(rm_mainmenu);
                    break;
                }      
            }
       
            //Breaks
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
